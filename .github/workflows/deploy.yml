name: Deploy Telegram Bot

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the project
      - name: Build project
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          PASSWORD_HASH: ${{ secrets.PASSWORD_HASH }}
          DB_PATH: ${{ secrets.DB_PATH }}
        run: npm run build

      # Install sshpass to handle password-based SSH
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      # Copy built files to the server using scp and sshpass
      - name: Transfer built files via SSH
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r dist/ $SERVER_USER@$SERVER_IP:/root/telegram_bot/

      # Restart PM2 on the server
      - name: Reload bot on the server using pm2
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh $SERVER_USER@$SERVER_IP "
            cd $PROJECT_DIR &&
            pm2 restart tbot --env TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }} --env PASSWORD_HASH=${{ secrets.PASSWORD_HASH }} --env DB_PATH=${{ secrets.DB_PATH }}
          "
